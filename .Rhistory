print(5+3)
# load reuired libraries
library(data.table)
library(ggplot2)
library(ggmosaic)
library(readr)
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library(data.table)
install.packages("ggplot2")
install.packages("ggmosaic")
install.packages("readr")
library(data.table)
library(ggplot2)
library(ggmosaic)
library(readr)
filePath <- "<D:\Projects\Proj#3_Quantium_Data_Analysis_Retail_ChipsCategory>/"
transactionData <- fread(paste0(filepath, "QVI_transaction_data.csv"))
customerData <- fread(paste0(filePath, "QVI_purchase_behaviour.csv"))
save.image("D:\\Projects\\Proj#3_Quantium_Data_Analysis_Retail_ChipsCategory\\.RData")
filePath <- "D:\Projects\Proj#3_Quantium_Data_Analysis_Retail_ChipsCategory>/"
filePath <- "D:\\Projects\\Proj#3_Quantium_Data_Analysis_Retail_ChipsCategory\\"
transactionData <- fread(paste0(filepath, "QVI_transaction_data.csv"))
customerData <- fread(paste0(filePath, "QVI_purchase_behaviour.csv"))
transactionData <- fread(paste0(filepath, "QVI_transaction_data.xlsx"))
transactionData <- fread(paste0(filePath, "QVI_transaction_data.csv"))
transactionData <- fread(paste0(filePath, "QVI_transaction_data.xlsx"))
install.packages("readxl")
library(readxl)
transactionData <- fread(paste0(filePath, "QVI_transaction_data.xlsx"))
filePath <- "D:\\Projects\\Proj#3_Quantium_Data_Analysis_Retail_ChipsCategory\\"
transactionData <- read_excel(paste0(filePath, "QVI_transaction_data.xlsx"))
customerData <- fread(paste0(filePath, "QVI_purchase_behaviour.csv"))
# install packages ("data.table", "ggplot2", "readr")
#install.packages("ggplot2")
#install.packages("ggmosaic")
install.packages("readr")
install.packages("readxl")
# load required libraries
library(data.table)
library(ggplot2)
library(ggmosaic)
library(readr)
library(readxl)
filePath <- "D:\\Projects\\Proj#3_Quantium_Data_Analysis_Retail_ChipsCategory\\"
transactionData <- read_excel(paste0(filePath, "QVI_transaction_data.xlsx"))
customerData <- fread(paste0(filePath, "QVI_purchase_behaviour.csv"))
str(transactionData)
head(transactionData)
summary(transactionData)
transactionData$DATE <- as.Date(transactionData$DATE, origin = "1899-12-30")
head(transactionData)
transactionData$DATE <- as.Date(transactionData$DATE, origin = "1899-12-30")
unique(transactionData$PROD_NAME)
# Remove salsa
transactionData[, SALSA := grepl("salsa", tolower(PROD_NAME))]
transactionData <- transactionData[SALSA == FALSE][, SALSA := NULL]
setDT(transactionData)
# Remove salsa
transactionData[, SALSA := grepl("salsa", tolower(PROD_NAME))]
transactionData <- transactionData[SALSA == FALSE][, SALSA := NULL]
unique(transactionData$PROD_NAME)
summary(transactionData)
str(transactionData)
transactionData <- transactionData[SALSA == FALSE][, SALSA := NULL]
transactionData[PROD_QTY > 100] 
transactionData[PROD_QTY > 50] 
transactionData[PROD_QTY > 2] 
transactionData[PROD_QTY > 10] 
transactionData[PROD_QTY > 100, .(LYLTY_CARD_NBR, PROD_NAME, PROD_QTY, TOT_SALES)]
 # Remove customer who bought 200 units
transactionData <- transactionData[LYLTY_CARD_NBR != <outlier_number>]
summary(transactionData)
summary(transactionData)
transactionData <- transactionData[LYLTY_CARD_NBR != <outlier_number>]
transactionData <- transactionData[LYLTY_CARD_NBR != <226000>]
transactionData <- transactionData[LYLTY_CARD_NBR != 226000]
summary(transactionData)
transactions_by_day <- transactionData[, .N, by = DATE]
# Plot transactions over time
ggplot(transactions_by_day, aes(x = DATE, y = N)) +
  geom_line() +
  labs(title = "Transactions Over Time") +
  scale_x_date(breaks = "1 month") +
  theme(axis.text.x = element_text(angle = 90))
# Count transactions per day
transactions_by_day <- transactionData[, .N, by = DATE]
# Convert DATE to Date class if not already
if (!inherits(transactions_by_day$DATE, "Date")) {
  transactions_by_day[, DATE := as.Date(DATE)]
}
# Plot transactions over time
library(scales)  # for date scale formatting
ggplot(transactions_by_day, aes(x = DATE, y = N)) +
  geom_line() +
  labs(title = "Transactions Over Time", x = "Date", y = "Number of Transactions") +
  scale_x_date(date_breaks = "1 month", date_labels = "%b-%Y") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
transactions_by_day <- transactionData[, .N, by = DATE]
# Plot transactions over time
ggplot(transactions_by_day, aes(x = DATE, y = N)) +
  geom_line() +
  labs(title = "Transactions Over Time") +
  scale_x_date(breaks = "1 month") +
  theme(axis.text.x = element_text(angle = 90))
# Extract pack size
transactionData[, PACK_SIZE := parse_number(PROD_NAME)]
# Extract brand name
transactionData[, BRAND := tstrsplit(PROD_NAME, ' ')[[1]]]
# Normalize brand names
transactionData[BRAND == "RED", BRAND := "RRD"]
summary(customerData)
# Merge with transactions
data <- merge(transactionData, customerData, all.x = TRUE)
sales_summary <-data[, .(TOTAL_SALES =sum(TOT_SALES)), by = .(LIFESTAGE, PREMIUM_CUSTOMER)]
units_summary <- data[, .(UNITS = sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)), by = .(LIFESTAGE, PREMIUM_CUSTOMER)]
  # Price per unit
price_summary <- data[, .(AVG_PRICE = mean(TOT_SALES/PROD_QTY)), by = .(LIFESTAGE, PREMIUM_CUSTOMER)]
# Example: compare price per unit between segments
premium_group <- data[LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER == "Premium"]
mainstream_group <- data[LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER == "Mainstream"]
t.test(premium_group$TOT_SALES / premium_group$PROD_QTY,
       mainstream_group$TOT_SALES / mainstream_group$PROD_QTY)
# Find favorite brands for Mainstream Young Singles
segment_data <- data[LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER == "Mainstream"]
segment_data[, .N, by = BRAND][order(-N)]
fwrite(data, paste0(filePath, "Task_1_QVI_data.csv"))
q()
q()
q()
